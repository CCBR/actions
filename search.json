[
  {
    "objectID": "actions/post-release/index.html",
    "href": "actions/post-release/index.html",
    "title": "post-release",
    "section": "",
    "text": "post-release - Post-release cleanup chores, intended to be triggered by publishing a release\nThis action is designed to be triggered by publishing a release. On completion, it will open a pull request to merge post-release clean up chores such as bumping the developemnt version in the version file and changelog. It works best when used in conjunction with draft-release to help automate parts of the release process."
  },
  {
    "objectID": "actions/post-release/index.html#usage",
    "href": "actions/post-release/index.html#usage",
    "title": "post-release",
    "section": "Usage",
    "text": "Usage\nRequired files:\n\nCHANGELOG.md - a changelog or news file with entries in reverse chronological order. The newest entry should contain “development header”.\nVERSION - a single-source version file.\nCITATION.cff - a citation file. (optional)\n\n\nBasic example\npost-release.yml\nname: post-release\n\non:\n  release:\n    types:\n      - published\n\njobs:\n  cleanup:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - uses: CCBR/actions/post-release@v0.1\n        with:\n          github-token: ${{ github.token }}\n\n\nCustomized inputs\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - uses: CCBR/actions/post-release@main\n        with:\n          github-token: ${{ github.token }}\n          ccbr-actions-version: main\n          python-version: 3.11\n          pr-branch: release/${{ github.ref_name }}\n          draft-branch: release-draft\n          version-filepath: VERSION\n          changelog-filepath: CHANGELOG.md\n          citation-filepath: CITATION.cff\n          dev-header: \"development version\"\n          github-actor: \"41898282+github-actions[bot]\"\n          update-sliding-branch: false"
  },
  {
    "objectID": "actions/post-release/index.html#inputs",
    "href": "actions/post-release/index.html#inputs",
    "title": "post-release",
    "section": "Inputs",
    "text": "Inputs\n\ngithub-token: GitHub Actions token (e.g. github.token). Required.\nccbr-actions-version: The version of CCBR/actions to use. Required. Default: main.\npython-version: The version of Python to install. Required. Default: 3.11.\npr-branch: Branch to use for the post-release chores, from where a PR will be opened. Recommended to use ‘release/{TAG_NAME}’. Required. Default: release/${{ github.ref_name }}.\ndraft-branch: Branch used for the prior release draft (see draft-release action). Required. Default: release-draft.\nversion-filepath: Path to the file containing the current version. Default: VERSION.\nchangelog-filepath: Path to the changelog or news file. Default: CHANGELOG.md.\ncitation-filepath: Path to the citation file. Default: CITATION.cff.\ndev-header: Header string to match to find the development version entry in the changelog, typically of the form ‘##  development version’. Default: development version.\ngithub-actor: Username of GitHub actor for the git commit when the docs branch is deployed. Required. Default: 41898282+github-actions[bot].\nupdate-sliding-branch: Whether to update the sliding branch (major.minor) to the new patch version. Default: false."
  },
  {
    "objectID": "actions/mkdocs-mike/index.html",
    "href": "actions/mkdocs-mike/index.html",
    "title": "mkdocs-mike",
    "section": "",
    "text": "mkdocs-mike - Deploy documentation to github pages using mkdocs + mike\nThis action is designed to be used with a repository that uses mkdocs to generate documentation and mike to deploy it to github pages. The action will checkout the repository, install the necessary python packages, build the documentation, and deploy it to the specified branch."
  },
  {
    "objectID": "actions/mkdocs-mike/index.html#usage",
    "href": "actions/mkdocs-mike/index.html#usage",
    "title": "mkdocs-mike",
    "section": "Usage",
    "text": "Usage\nAny python requirements for your docs website (mkdocs, mike, other extensions) should be placed in docs/requirements.txt. You will also need an mkdocs config file mkdocs.yml in the root of your repository. To properly configure mike for your website, you will also need to complete these one-time steps:\n\ndelete any existing github workflows that deploy to github pages\ndelete all files in gh-pages if the branch exists already\ngit switch gh-pages\ngit rm -rf $(git ls-files)\ngit commit -m 'docs: delete gh-pages files to prepare for mike'\ncheck out the previous release tag and deploy it\ngit checkout v1.0.0\nmike deploy 1.0 latest --push --update-aliases --branch gh-pages\nWe recommend using just the major and minor components of the version without the leading v.\nset the default landing page:\nmike set-default latest\ndeploy the dev version from main\ngit switch main\nmike deploy dev --push --update-aliases --branch gh-pages\n\n\nBasic example\ndocs-mkdocs.yml\nsteps:\n  - uses: actions/checkout@v4\n    with:\n        fetch-depth: 0\n  - uses: CCBR/actions/mkdocs-mike@main\n    with:\n        github-token: ${{ github.token }}\n\n\nCustomized inputs\nsteps:\n  - uses: actions/checkout@v4\n    with:\n      fetch-depth: 0\n  - uses: CCBR/actions/mkdocs-mike@main\n    with:\n      github-token: ${{ github.token }}\n      ccbr-actions-version: 0.1\n      python-version: 3.12\n      docs-branch: gh-pages\n      github-actor: \"41898282+github-actions[bot]\""
  },
  {
    "objectID": "actions/mkdocs-mike/index.html#inputs",
    "href": "actions/mkdocs-mike/index.html#inputs",
    "title": "mkdocs-mike",
    "section": "Inputs",
    "text": "Inputs\n\ngithub-token: GitHub Actions token (e.g. { github.token }). Required.\nccbr-actions-version: The version of ccbr_actions to install. Required. Default: main.\npython-version: The version of Python to install. Required. Default: 3.11.\ndocs-branch: The branch to deploy the docs website to. Required. Default: gh-pages.\ngithub-actor: Username of GitHub actor for the git commit when the docs branch is deployed. Required. Default: 41898282+github-actions[bot]."
  },
  {
    "objectID": "actions/mkdocs-mike/index.html#outputs",
    "href": "actions/mkdocs-mike/index.html#outputs",
    "title": "mkdocs-mike",
    "section": "Outputs",
    "text": "Outputs\n\nversion: The version of the docs being deployed..\nalias: The alias of the version being deployed.."
  },
  {
    "objectID": "actions/build-docker/index.html",
    "href": "actions/build-docker/index.html",
    "title": "build-docker",
    "section": "",
    "text": "build-docker - Build a docker container using CCBR guidelines\nThis action is designed to build Docker containers according to the format used in CCBR/dockers2.\nThis action:"
  },
  {
    "objectID": "actions/build-docker/index.html#usage",
    "href": "actions/build-docker/index.html#usage",
    "title": "build-docker",
    "section": "Usage",
    "text": "Usage\n\nBasic example\nsteps:\n  - uses: actions/checkout@v4\n    with:\n        fetch-depth: 0\n  - uses: CCBR/actions/build-docker@main\n    with:\n      dockerfile: Dockerfile.v1\n      dockerhub-namespace: ${{ secrets.DOCKERHUB_NAMESPACE }}\n      dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}\n      dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}\n      suffix: dev\n      push: true\n      ccbr-actions-version: v0.2\n      github-token: ${{ github.token }}\n      github-actor: ${{ github.actor }}\nFor an example to manually trigger the workflow for a single docker container, see build-docker-manual.yml.\nFor an advanced example to automatically build docker containers when files change, see build-docker-auto.yml."
  },
  {
    "objectID": "actions/build-docker/index.html#inputs",
    "href": "actions/build-docker/index.html#inputs",
    "title": "build-docker",
    "section": "Inputs",
    "text": "Inputs\n\ndockerfile: path to the Dockerfile in the repo (e.g. common/ccbr_bwa/Dockerfile) . Required.\ndockerhub-namespace: dockerhub namespace or org name (e.g. nciccbr) . Required. Default: nciccbr.\ndockerhub-username: dockerhub username of a user with admin permissions for dockerhub-namespace. Recommend using secrets, e.g. secrets.DOCKERHUB_USERNAME . Required.\ndockerhub-token: dockerhub token with read & write permissions. Strongly recommend using secrets, e.g. secrets.DOCKERHUB_TOKEN .\nsuffix: Suffix to add to image tag eg. “dev” to add “-dev” . Required. Default: feat.\npush: Push to DockerHub (leave unchecked to just build the container without pushing) . Required.\nccbr-actions-version: The version of ccbr_actions to use . Required. Default: main.\npython-version: The version of Python to install . Required. Default: 3.11.\ngithub-actor: Username of GitHub actor for the git commit when the README is updated . Required. Default: 41898282+github-actions[bot].\ngithub-token: GitHub Actions token (e.g. github.token) . Required.\nprint-versions: Whether to print tool versions in the container for the README file using json-file . Default: True.\njson-file: Relative path to JSON file for printing tool versions. If not provided and print-versions is true, a default JSON file in ccbr_actions will be used. . Default: scripts/tool_version_commands.json.\ngh-merge-args: arguments for gh pr merge . Default: -ds --admin."
  },
  {
    "objectID": "CHANGELOG.html",
    "href": "CHANGELOG.html",
    "title": "CCBR actions",
    "section": "",
    "text": "make citation files optional for draft-release and post-release. (#44, @kelly-sovacool)\nfix post-release action to properly update the sliding branch when new releases have incompatible history (typically due to rebasing). (#46, @kelly-sovacool)\nnew documentation website: https://CCBR.github.io/actions. (#48, #49, @kelly-sovacool)"
  },
  {
    "objectID": "CHANGELOG.html#actions-development-version",
    "href": "CHANGELOG.html#actions-development-version",
    "title": "CCBR actions",
    "section": "",
    "text": "make citation files optional for draft-release and post-release. (#44, @kelly-sovacool)\nfix post-release action to properly update the sliding branch when new releases have incompatible history (typically due to rebasing). (#46, @kelly-sovacool)\nnew documentation website: https://CCBR.github.io/actions. (#48, #49, @kelly-sovacool)"
  },
  {
    "objectID": "CHANGELOG.html#actions-0.2.2",
    "href": "CHANGELOG.html#actions-0.2.2",
    "title": "CCBR actions",
    "section": "actions 0.2.2",
    "text": "actions 0.2.2\n\nfix print_versions.py script to work with new JSON version proposed here. (#39, @kopardev)"
  },
  {
    "objectID": "CHANGELOG.html#actions-0.2.1",
    "href": "CHANGELOG.html#actions-0.2.1",
    "title": "CCBR actions",
    "section": "actions 0.2.1",
    "text": "actions 0.2.1\n\nfix bug in build-docker, where version information was overwriting the docker container information in the README file & dockerhub description. (#35, @kelly-sovacool)"
  },
  {
    "objectID": "CHANGELOG.html#actions-0.2.0",
    "href": "CHANGELOG.html#actions-0.2.0",
    "title": "CCBR actions",
    "section": "actions 0.2.0",
    "text": "actions 0.2.0\n\nnew actions & example workflows:\n\nlabel-issue-repo-name - Label issues & PRs with the repository name\nadd-issue-label-list - Update issue description with a list of issues of a given label\nupdate-cff-R - For R packages: update the CITATION.cff file based on the DESCRIPTION file.\nbuild-docker - Build docker containers for CCBR/Dockers2. (#31, #33, @kelly-sovacool)\n\nminor documentation improvements."
  },
  {
    "objectID": "CHANGELOG.html#actions-0.1.3",
    "href": "CHANGELOG.html#actions-0.1.3",
    "title": "CCBR actions",
    "section": "actions 0.1.3",
    "text": "actions 0.1.3\n\nfix: make sure get_latest_release_hash() and get_current_hash() strip newlines in hash strings. (@kelly-sovacool)\n\nthis bug caused a malformed command string in is_ancestor(), which caused mkdocs-mike to fail.\n\nset update-sliding-branch to false by default in post-release action. (#18, @kelly-sovacool)\nfix bug that prevented mkdocs-mike from working on repos with no release. (#20, @kelly-sovacool)\nfix: resolve symlinks when writing files. (#23, #24, @kelly-sovacool)"
  },
  {
    "objectID": "CHANGELOG.html#actions-0.1.2",
    "href": "CHANGELOG.html#actions-0.1.2",
    "title": "CCBR actions",
    "section": "actions 0.1.2",
    "text": "actions 0.1.2\n\nfix the draft-release action to properly use the full owner & repo name when creating a draft release. (#13, @kelly-sovacool)\nnew option in post-release to update a sliding branch (typically named v&lt;major&gt;.&lt;minor&gt;) with new patch releases. (#13, #16, @kelly-sovacool)\nfix logic for get_latest_release_tag() to ignore draft releases. (#14, @kelly-sovacool)"
  },
  {
    "objectID": "CHANGELOG.html#actions-0.1.1",
    "href": "CHANGELOG.html#actions-0.1.1",
    "title": "CCBR actions",
    "section": "actions 0.1.1",
    "text": "actions 0.1.1\n\nfix draft-release action to only use a manual version if it is provided, otherwise default to automatically determine it based on conventional commits. (#10, @kelly-sovacool)\ndocument one-time setup steps for mkdocs-mike action. (#11, @kelly-sovacool)"
  },
  {
    "objectID": "CHANGELOG.html#actions-0.1.0",
    "href": "CHANGELOG.html#actions-0.1.0",
    "title": "CCBR actions",
    "section": "actions 0.1.0",
    "text": "actions 0.1.0\nThis is the first release of ccbr_actions! 🎉\n\nNew actions\n\nmkdocs-mike- Deploy documentation to github pages using mkdocs + mike. (#1, @kelly-sovacool)\ndraft-release- Draft a new release based on conventional commits and prepare release notes. (#4, @kelly-sovacool)\npost-release - Post-release cleanup chores, intended to be triggered by publishing a release. (#4, @kelly-sovacool)\n\n\n\nNew examples\nSee examples/:\n\nbuild-nextflow.yml\nbuild-python.yml\nbuild-snakemake.yml\ndocs-mkdocs.yml\ndocs-quarto.yml\ndraft-release.yml\npost-release.yml\ntechdev-project.yml\nuser-projects.yml\n\n\n\nPackage\nccbr_actions is a new Python package with helper functions for our custom GitHub Actions. (#1, @kelly-sovacool)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CCBR actions",
    "section": "",
    "text": "GitHub Actions for CCBR repos"
  },
  {
    "objectID": "index.html#actions",
    "href": "index.html#actions",
    "title": "CCBR actions",
    "section": "Actions",
    "text": "Actions\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          action\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\naction\n\n\ndescription\n\n\n\n\n\n\nadd-issue-label-list\n\n\nUpdate issue description with a list of issues of a given label\n\n\n\n\nbuild-docker\n\n\nBuild a docker container using CCBR guidelines\n\n\n\n\ndraft-release\n\n\nDraft a new release based on conventional commits and prepare release notes\n\n\n\n\nlabel-issue-repo-name\n\n\nLabel issues & PRs with the repository name\n\n\n\n\nmkdocs-mike\n\n\nDeploy documentation to github pages using mkdocs + mike\n\n\n\n\npost-release\n\n\nPost-release cleanup chores, intended to be triggered by publishing a release\n\n\n\n\n\nNo matching items\n\n\nSee example workflows that use our custom actions here: https://github.com/CCBR/actions/tree/main/examples. You can copy these to your own repository in the .github/workflows/ directory and modify them for your needs.\nView the GitHub Actions docs for more information on how to write and use GitHub Actions workflows."
  },
  {
    "objectID": "index.html#package",
    "href": "index.html#package",
    "title": "CCBR actions",
    "section": "Package",
    "text": "Package\nThis repo contains a python package with helper functions for some of our custom actions. You do not need to install anything in order to use the example workflows, as the actions install their dependencies as needed. However, you can install the package if you wish to use it outside of GitHub Actions.\n\nInstallation\nYou will need the GitHub CLI installed (this is pre-installed on all github actions runners): https://github.com/cli/cli#installation\nThen install the ccbr_actions package with pip:\npip install git+https://github.com/CCBR/actions\nOr install it from a specific version or branch with:\npip install git+https://github.com/CCBR/actions@v0.1\nView the package documentation here."
  },
  {
    "objectID": "index.html#help-contributing",
    "href": "index.html#help-contributing",
    "title": "CCBR actions",
    "section": "Help & Contributing",
    "text": "Help & Contributing\nCome across a bug? Open an issue and include a minimal reproducible example.\nHave a question? Ask it in discussions.\nWant to contribute to this project? Check out the contributing guidelines."
  },
  {
    "objectID": "index.html#citation",
    "href": "index.html#citation",
    "title": "CCBR actions",
    "section": "Citation",
    "text": "Citation\nPlease cite this software if you use it in a publication:\n\nSovacool K., Koparde V. (2024). CCBR actions: GitHub Actions for CCBR repos (version v0.2.2). DOI: 10.5281/zenodo.13761059 URL: https://ccbr.github.io/actions/\n\nBibtex entry:\n\n\n@misc{YourReferenceHere,\nauthor = {Sovacool, Kelly and Koparde, Vishal},\ndoi = {10.5281/zenodo.13761059},\nmonth = {11},\ntitle = {CCBR actions: GitHub Actions for CCBR repos},\nurl = {https://ccbr.github.io/actions/},\nyear = {2024}\n}"
  },
  {
    "objectID": "reference/release.html",
    "href": "reference/release.html",
    "title": "release",
    "section": "",
    "text": "release\nHelpers for drafting releases and cleaning up after releases are published.\n\n\n\n\n\nName\nDescription\n\n\n\n\ncreate_release_draft\nCreate a draft release on GitHub.\n\n\nget_changelog_lines\nPrepare the changelog to draft a release.\n\n\nget_release_version\nGet the next release version based on manual input or conventional commit history.\n\n\npost_release_cleanup\nPerform post-release cleanup tasks.\n\n\nprepare_draft_release\nPrepare the release by updating version, changelog, and release notes.\n\n\npush_release_draft_branch\nPushes a release draft branch to the remote repository.\n\n\nset_release_version\nSet the next release version for GitHub Actions based on manual input or conventional commit history.\n\n\nwrite_lines\nWrite lines to a file or return them as a string for debugging.\n\n\n\n\n\nrelease.create_release_draft(\n    release_branch='release-draft',\n    next_version='${{ steps.release.outputs.NEXT_VERSION }}',\n    release_notes_filepath='.github/latest-release.md',\n    release_target=get_current_hash(),\n    repo='${{ github.repository }}',\n    debug=False,\n)\nCreate a draft release on GitHub.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrelease_branch\nstr\nThe name of the release branch. Defaults to “release-draft”.\n'release-draft'\n\n\nnext_version\nstr\nThe next version of the release. Defaults to “\\({{ steps.release.outputs.NEXT_VERSION }}\". | `'\\){{ steps.release.outputs.NEXT_VERSION }}‘| | release_notes_filepath | [str](str)   | The file path to the release notes. Defaults to \".github/latest-release.md\".              |’.github/latest-release.md’| | release_target         | [str](str)   | The target commit hash for the release. Defaults to the current commit hash.              |get_current_hash()| | repo                   | [str](str)   | The GitHub repository in the format \"owner/repo\". Defaults to \"${{ github.repository }}\". |‘${{ github.repository }}’| | debug                  | [bool](bool) | If True, print the command instead of executing it. Defaults to False.                    |False`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nThe URL of the created release draft, or an empty string if in debug mode.\n\n\n\n\n\n\n\nrelease.get_changelog_lines(\n    latest_version_strict,\n    next_version_strict,\n    changelog_filepath='CHANGELOG.md',\n    dev_header='development version',\n)\nPrepare the changelog to draft a release.\nThis function reads the changelog file and prepares it for the next release by replacing the development version header with the next version string and collecting lines for the next release.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlatest_version_strict\nstr\nThe latest version string that follows semantic versioning.\nrequired\n\n\nnext_version_strict\nstr\nThe next version string that follows semantic versioning.\nrequired\n\n\nchangelog_filepath\nstr\nThe path to the changelog file. Defaults to “CHANGELOG.md”.\n'CHANGELOG.md'\n\n\ndev_header\nstr\nThe header used for the development version in the changelog. Defaults to “development version”.\n'development version'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ntuple\n\nA tuple containing two lists: - changelog_lines (list): The complete list of lines from the changelog file with the development version header replaced. - next_release_lines (list): The list of lines that pertain to the next release.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf any of the provided version strings do not match the semantic versioning pattern.\n\n\n\n\n\n\n\nrelease.get_release_version(\n    next_version_manual=None,\n    next_version_convco=None,\n    current_version=None,\n    gh_event_name=None,\n    with_leading_v=True,\n)\nGet the next release version based on manual input or conventional commit history.\nIf a manual version is provided, it is used regardless of the conventional commit history.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nnext_version_manual\nstr\nThe manually specified next version (default is None).\nNone\n\n\nnext_version_convco\nstr\nThe next version determined by conventional commit history (default is None).\nNone\n\n\ncurrent_version\nstr\nThe current version of the project (default is None).\nNone\n\n\ngh_event_name\nstr\nThe name of the GitHub event triggering the release (default is None).\nNone\n\n\nwith_leading_v\nbool\nWhether to include a leading ‘v’ in the version string (default is True).\nTrue\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nThe next release version.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nWarning\nIf the manual version does not match the version determined by conventional commit history.\n\n\n\n\n\n\n&gt;&gt;&gt; get_release_version(next_version_manual=\"1.2.0\")\n'1.2.0'\n&gt;&gt;&gt; get_release_version(next_version_convco=\"1.2.1\", current_version=\"1.2.0\")\n'1.2.1'\n\n\n\n\nrelease.post_release_cleanup(\n    changelog_filepath='CHANGELOG.md',\n    repo='${{ github.repository }}',\n    release_tag='${{ github.ref_name }}',\n    pr_branch='${{ inputs.branch }}',\n    pr_reviewer='${{ github.triggering_actor }}',\n    draft_branch='release-draft',\n    dev_header='development version',\n    version_filepath='VERSION',\n    citation_filepath='CITATION.cff',\n    debug=False,\n)\nPerform post-release cleanup tasks.\nThis function performs cleanup tasks after a release has been created. It updates the changelog, resets the version file, and creates a pull request to merge the changes back into the main branch.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nchangelog_filepath\nstr\nThe path to the changelog file (default is “CHANGELOG.md”).\n'CHANGELOG.md'\n\n\nrepo\nstr\nThe GitHub repository (default is “\\({{ github.repository }}\").                                      | `'\\){{ github.repository }}‘| | release_tag        | [str](str) | The tag of the release (default is \"${{ github.ref_name }}\").                                       |’\\({{ github.ref_name }}'`         |\n| pr_branch          | [str](`str`) | The branch for the pull request (default is \"\\){{ inputs.branch }}”).\n'${{ inputs.branch }}'\n\n\npr_reviewer\nstr\nThe reviewer for the pull request (default is “\\({{ github.triggering_actor }}\").                    | `'\\){{ github.triggering_actor }}‘| | draft_branch       | [str](str) | The name of the draft branch (default is \"release-draft\").                                          |’release-draft’| | dev_header         | [str](str) | The header for the development version section in the changelog (default is \"development version\"). |‘development version’| | version_filepath   | [str](str) | The path to the version file (default is \"VERSION\").                                                |‘VERSION’| | citation_filepath  | [str](str) | The path to the citation file (default is \"CITATION.cff\").                                          |‘CITATION.cff’`\n\n\n\n\n\n\n\n&gt;&gt;&gt; post_release_cleanup()\n&gt;&gt;&gt; post_release_cleanup(changelog_filepath=\"docs/CHANGELOG.md\", pr_branch=\"main\")\n\n\n\n\nrelease.prepare_draft_release(\n    next_version_manual='${{ github.event.inputs.version_tag }}',\n    next_version_convco='${{ steps.semver.outputs.next }}',\n    current_version='${{ steps.semver.outputs.current }}',\n    gh_event_name='${{ github.event_name }}',\n    changelog_filepath='CHANGELOG.md',\n    dev_header='development version',\n    release_notes_filepath='.github/latest-release.md',\n    version_filepath='VERSION',\n    citation_filepath='CITATION.cff',\n    release_branch='release-draft',\n    pr_ref_name='${{ github.ref_name }}',\n    repo='${{ github.repository }}',\n    debug=False,\n)\nPrepare the release by updating version, changelog, and release notes.\nThis function prepares the release by resolving file paths, determining the next version, updating the changelog and release notes, and setting the next version as an output.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndev_header\nstr\nThe header for the development version section in the changelog (default is “development version”).\n'development version'\n\n\nrelease_notes_filepath\nstr\nThe path to the release notes file (default is “.github/latest-release.md”).\n'.github/latest-release.md'\n\n\nversion_filepath\nstr\nThe path to the version file (default is “VERSION”).\n'VERSION'\n\n\ncitation_filepath\nstr\nThe path to the citation file (default is “CITATION.cff”).\n'CITATION.cff'\n\n\nrelease_branch\nstr\nThe name of the release branch (default is “release-draft”).\n'release-draft'\n\n\npr_ref_name\nstr\nThe reference name of the pull request (default is “\\({{ github.ref_name }}\").                       | `'\\){{ github.ref_name }}‘| | repo                   | [str](str)   | The GitHub repository (default is \"${{ github.repository }}\").                                      |’${{ github.repository }}’| | debug                  | [bool](bool) | If True, print debug information instead of writing to files (default is False).                    |False`\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nAssertionError\nIf the changelog or version file does not exist.\n\n\n\n\n\n\n&gt;&gt;&gt; prepare_release()\n&gt;&gt;&gt; prepare_release(dev_header=\"dev version\", debug=True)\n\n\n\n\nrelease.push_release_draft_branch(\n    release_branch='release-draft',\n    pr_ref_name='${{ github.ref_name }}',\n    next_version=None,\n    files=['CHANGELOG.md', 'VERSION', 'CITATION.cff'],\n    debug=False,\n)\nPushes a release draft branch to the remote repository.\nThis function creates or switches to a specified release branch, merges changes from a pull request reference, stages specified files, commits the changes with a message indicating the next version, and pushes the branch to the remote repository. If the branch already exists, it will be deleted before creating a new one.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrelease_branch\nstr\nThe name of the release branch to create or switch to. Defaults to “release-draft”.\n'release-draft'\n\n\npr_ref_name\nstr\nThe reference name of the pull request to merge. Defaults to “\\({{ github.ref_name }}\".        | `'\\){{ github.ref_name }}’| | next_version   | [str](str)   | The next version number to include in the commit message. Defaults to None.                   |None| | files          | [list](list) | A list of files to stage and commit. Defaults to [\"CHANGELOG.md\", \"VERSION\", \"CITATION.cff\"]. |[‘CHANGELOG.md’, ‘VERSION’, ‘CITATION.cff’]| | debug          | [bool](bool) | If True, prints the generated git commands instead of executing them. Defaults to False.      |False`\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\nNone\n\n\n\n\n\n\n\nrelease.set_release_version(\n    next_version_manual='${{ github.event.inputs.version_tag }}',\n    next_version_convco='${{ steps.semver.outputs.next }}',\n    current_version='${{ steps.semver.outputs.current }}',\n    gh_event_name='${{ github.event_name }}',\n)\nSet the next release version for GitHub Actions based on manual input or conventional commit history.\nThis function determines and sets the next release version for GitHub Actions. It uses either a manually specified version or a version determined by conventional commit history. The determined version is then set as an output for use in subsequent GitHub Actions steps.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nnext_version_manual\nstr\nThe manually specified next version (default is “\\({{ github.event.inputs.version_tag }}\").                  | `'\\){{ github.event.inputs.version_tag }}‘| | next_version_convco | [str](str) | The next version determined by conventional commit history (default is \"${{ steps.semver.outputs.next }}\"). |’\\({{ steps.semver.outputs.next }}'`       |\n| current_version     | [str](`str`) | The current version of the project (default is \"\\){{ steps.semver.outputs.current }}”).\n'${{ steps.semver.outputs.current }}'\n\n\ngh_event_name\nstr\nThe name of the GitHub event triggering the release (default is “\\({{ github.event_name }}\").                | `'\\){{ github.event_name }}’`\n\n\n\n\n\n\n\n&gt;&gt;&gt; set_release_version()\n&gt;&gt;&gt; set_release_version(next_version_manual=\"1.2.0\")\n\n\n\n\nrelease.write_lines(filepath, lines, debug=False)\nWrite lines to a file or return them as a string for debugging.\n\nThis function writes the provided lines to a specified file. If debugging is enabled,\nit returns the lines as a single string instead of writing to the file.\n\nArgs:\n    filepath (str): The path to the file where the lines should be written.\n    lines (list of str): The lines to write to the file.\n    debug (bool): If True, return the lines as a single string instead of writing to the file (default is False).\n\nReturns:\n    str: The lines as a single string if debugging is enabled, otherwise None.\n\nExamples:\n    &gt;&gt;&gt; write_lines(\"output.txt\", [\"line 1\n“,”line 2 “])\n    &gt;&gt;&gt; write_lines(\"output.txt\", [\"line 1\n“,”line 2 “], debug=True) ‘line 1 line 2’",
    "crumbs": [
      "API",
      "Modules",
      "release"
    ]
  },
  {
    "objectID": "reference/release.html#functions",
    "href": "reference/release.html#functions",
    "title": "release",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncreate_release_draft\nCreate a draft release on GitHub.\n\n\nget_changelog_lines\nPrepare the changelog to draft a release.\n\n\nget_release_version\nGet the next release version based on manual input or conventional commit history.\n\n\npost_release_cleanup\nPerform post-release cleanup tasks.\n\n\nprepare_draft_release\nPrepare the release by updating version, changelog, and release notes.\n\n\npush_release_draft_branch\nPushes a release draft branch to the remote repository.\n\n\nset_release_version\nSet the next release version for GitHub Actions based on manual input or conventional commit history.\n\n\nwrite_lines\nWrite lines to a file or return them as a string for debugging.\n\n\n\n\n\nrelease.create_release_draft(\n    release_branch='release-draft',\n    next_version='${{ steps.release.outputs.NEXT_VERSION }}',\n    release_notes_filepath='.github/latest-release.md',\n    release_target=get_current_hash(),\n    repo='${{ github.repository }}',\n    debug=False,\n)\nCreate a draft release on GitHub.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrelease_branch\nstr\nThe name of the release branch. Defaults to “release-draft”.\n'release-draft'\n\n\nnext_version\nstr\nThe next version of the release. Defaults to “\\({{ steps.release.outputs.NEXT_VERSION }}\". | `'\\){{ steps.release.outputs.NEXT_VERSION }}‘| | release_notes_filepath | [str](str)   | The file path to the release notes. Defaults to \".github/latest-release.md\".              |’.github/latest-release.md’| | release_target         | [str](str)   | The target commit hash for the release. Defaults to the current commit hash.              |get_current_hash()| | repo                   | [str](str)   | The GitHub repository in the format \"owner/repo\". Defaults to \"${{ github.repository }}\". |‘${{ github.repository }}’| | debug                  | [bool](bool) | If True, print the command instead of executing it. Defaults to False.                    |False`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nThe URL of the created release draft, or an empty string if in debug mode.\n\n\n\n\n\n\n\nrelease.get_changelog_lines(\n    latest_version_strict,\n    next_version_strict,\n    changelog_filepath='CHANGELOG.md',\n    dev_header='development version',\n)\nPrepare the changelog to draft a release.\nThis function reads the changelog file and prepares it for the next release by replacing the development version header with the next version string and collecting lines for the next release.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlatest_version_strict\nstr\nThe latest version string that follows semantic versioning.\nrequired\n\n\nnext_version_strict\nstr\nThe next version string that follows semantic versioning.\nrequired\n\n\nchangelog_filepath\nstr\nThe path to the changelog file. Defaults to “CHANGELOG.md”.\n'CHANGELOG.md'\n\n\ndev_header\nstr\nThe header used for the development version in the changelog. Defaults to “development version”.\n'development version'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ntuple\n\nA tuple containing two lists: - changelog_lines (list): The complete list of lines from the changelog file with the development version header replaced. - next_release_lines (list): The list of lines that pertain to the next release.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf any of the provided version strings do not match the semantic versioning pattern.\n\n\n\n\n\n\n\nrelease.get_release_version(\n    next_version_manual=None,\n    next_version_convco=None,\n    current_version=None,\n    gh_event_name=None,\n    with_leading_v=True,\n)\nGet the next release version based on manual input or conventional commit history.\nIf a manual version is provided, it is used regardless of the conventional commit history.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nnext_version_manual\nstr\nThe manually specified next version (default is None).\nNone\n\n\nnext_version_convco\nstr\nThe next version determined by conventional commit history (default is None).\nNone\n\n\ncurrent_version\nstr\nThe current version of the project (default is None).\nNone\n\n\ngh_event_name\nstr\nThe name of the GitHub event triggering the release (default is None).\nNone\n\n\nwith_leading_v\nbool\nWhether to include a leading ‘v’ in the version string (default is True).\nTrue\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nThe next release version.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nWarning\nIf the manual version does not match the version determined by conventional commit history.\n\n\n\n\n\n\n&gt;&gt;&gt; get_release_version(next_version_manual=\"1.2.0\")\n'1.2.0'\n&gt;&gt;&gt; get_release_version(next_version_convco=\"1.2.1\", current_version=\"1.2.0\")\n'1.2.1'\n\n\n\n\nrelease.post_release_cleanup(\n    changelog_filepath='CHANGELOG.md',\n    repo='${{ github.repository }}',\n    release_tag='${{ github.ref_name }}',\n    pr_branch='${{ inputs.branch }}',\n    pr_reviewer='${{ github.triggering_actor }}',\n    draft_branch='release-draft',\n    dev_header='development version',\n    version_filepath='VERSION',\n    citation_filepath='CITATION.cff',\n    debug=False,\n)\nPerform post-release cleanup tasks.\nThis function performs cleanup tasks after a release has been created. It updates the changelog, resets the version file, and creates a pull request to merge the changes back into the main branch.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nchangelog_filepath\nstr\nThe path to the changelog file (default is “CHANGELOG.md”).\n'CHANGELOG.md'\n\n\nrepo\nstr\nThe GitHub repository (default is “\\({{ github.repository }}\").                                      | `'\\){{ github.repository }}‘| | release_tag        | [str](str) | The tag of the release (default is \"${{ github.ref_name }}\").                                       |’\\({{ github.ref_name }}'`         |\n| pr_branch          | [str](`str`) | The branch for the pull request (default is \"\\){{ inputs.branch }}”).\n'${{ inputs.branch }}'\n\n\npr_reviewer\nstr\nThe reviewer for the pull request (default is “\\({{ github.triggering_actor }}\").                    | `'\\){{ github.triggering_actor }}‘| | draft_branch       | [str](str) | The name of the draft branch (default is \"release-draft\").                                          |’release-draft’| | dev_header         | [str](str) | The header for the development version section in the changelog (default is \"development version\"). |‘development version’| | version_filepath   | [str](str) | The path to the version file (default is \"VERSION\").                                                |‘VERSION’| | citation_filepath  | [str](str) | The path to the citation file (default is \"CITATION.cff\").                                          |‘CITATION.cff’`\n\n\n\n\n\n\n\n&gt;&gt;&gt; post_release_cleanup()\n&gt;&gt;&gt; post_release_cleanup(changelog_filepath=\"docs/CHANGELOG.md\", pr_branch=\"main\")\n\n\n\n\nrelease.prepare_draft_release(\n    next_version_manual='${{ github.event.inputs.version_tag }}',\n    next_version_convco='${{ steps.semver.outputs.next }}',\n    current_version='${{ steps.semver.outputs.current }}',\n    gh_event_name='${{ github.event_name }}',\n    changelog_filepath='CHANGELOG.md',\n    dev_header='development version',\n    release_notes_filepath='.github/latest-release.md',\n    version_filepath='VERSION',\n    citation_filepath='CITATION.cff',\n    release_branch='release-draft',\n    pr_ref_name='${{ github.ref_name }}',\n    repo='${{ github.repository }}',\n    debug=False,\n)\nPrepare the release by updating version, changelog, and release notes.\nThis function prepares the release by resolving file paths, determining the next version, updating the changelog and release notes, and setting the next version as an output.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndev_header\nstr\nThe header for the development version section in the changelog (default is “development version”).\n'development version'\n\n\nrelease_notes_filepath\nstr\nThe path to the release notes file (default is “.github/latest-release.md”).\n'.github/latest-release.md'\n\n\nversion_filepath\nstr\nThe path to the version file (default is “VERSION”).\n'VERSION'\n\n\ncitation_filepath\nstr\nThe path to the citation file (default is “CITATION.cff”).\n'CITATION.cff'\n\n\nrelease_branch\nstr\nThe name of the release branch (default is “release-draft”).\n'release-draft'\n\n\npr_ref_name\nstr\nThe reference name of the pull request (default is “\\({{ github.ref_name }}\").                       | `'\\){{ github.ref_name }}‘| | repo                   | [str](str)   | The GitHub repository (default is \"${{ github.repository }}\").                                      |’${{ github.repository }}’| | debug                  | [bool](bool) | If True, print debug information instead of writing to files (default is False).                    |False`\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nAssertionError\nIf the changelog or version file does not exist.\n\n\n\n\n\n\n&gt;&gt;&gt; prepare_release()\n&gt;&gt;&gt; prepare_release(dev_header=\"dev version\", debug=True)\n\n\n\n\nrelease.push_release_draft_branch(\n    release_branch='release-draft',\n    pr_ref_name='${{ github.ref_name }}',\n    next_version=None,\n    files=['CHANGELOG.md', 'VERSION', 'CITATION.cff'],\n    debug=False,\n)\nPushes a release draft branch to the remote repository.\nThis function creates or switches to a specified release branch, merges changes from a pull request reference, stages specified files, commits the changes with a message indicating the next version, and pushes the branch to the remote repository. If the branch already exists, it will be deleted before creating a new one.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrelease_branch\nstr\nThe name of the release branch to create or switch to. Defaults to “release-draft”.\n'release-draft'\n\n\npr_ref_name\nstr\nThe reference name of the pull request to merge. Defaults to “\\({{ github.ref_name }}\".        | `'\\){{ github.ref_name }}’| | next_version   | [str](str)   | The next version number to include in the commit message. Defaults to None.                   |None| | files          | [list](list) | A list of files to stage and commit. Defaults to [\"CHANGELOG.md\", \"VERSION\", \"CITATION.cff\"]. |[‘CHANGELOG.md’, ‘VERSION’, ‘CITATION.cff’]| | debug          | [bool](bool) | If True, prints the generated git commands instead of executing them. Defaults to False.      |False`\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\nNone\n\n\n\n\n\n\n\nrelease.set_release_version(\n    next_version_manual='${{ github.event.inputs.version_tag }}',\n    next_version_convco='${{ steps.semver.outputs.next }}',\n    current_version='${{ steps.semver.outputs.current }}',\n    gh_event_name='${{ github.event_name }}',\n)\nSet the next release version for GitHub Actions based on manual input or conventional commit history.\nThis function determines and sets the next release version for GitHub Actions. It uses either a manually specified version or a version determined by conventional commit history. The determined version is then set as an output for use in subsequent GitHub Actions steps.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nnext_version_manual\nstr\nThe manually specified next version (default is “\\({{ github.event.inputs.version_tag }}\").                  | `'\\){{ github.event.inputs.version_tag }}‘| | next_version_convco | [str](str) | The next version determined by conventional commit history (default is \"${{ steps.semver.outputs.next }}\"). |’\\({{ steps.semver.outputs.next }}'`       |\n| current_version     | [str](`str`) | The current version of the project (default is \"\\){{ steps.semver.outputs.current }}”).\n'${{ steps.semver.outputs.current }}'\n\n\ngh_event_name\nstr\nThe name of the GitHub event triggering the release (default is “\\({{ github.event_name }}\").                | `'\\){{ github.event_name }}’`\n\n\n\n\n\n\n\n&gt;&gt;&gt; set_release_version()\n&gt;&gt;&gt; set_release_version(next_version_manual=\"1.2.0\")\n\n\n\n\nrelease.write_lines(filepath, lines, debug=False)\nWrite lines to a file or return them as a string for debugging.\n\nThis function writes the provided lines to a specified file. If debugging is enabled,\nit returns the lines as a single string instead of writing to the file.\n\nArgs:\n    filepath (str): The path to the file where the lines should be written.\n    lines (list of str): The lines to write to the file.\n    debug (bool): If True, return the lines as a single string instead of writing to the file (default is False).\n\nReturns:\n    str: The lines as a single string if debugging is enabled, otherwise None.\n\nExamples:\n    &gt;&gt;&gt; write_lines(\"output.txt\", [\"line 1\n“,”line 2 “])\n    &gt;&gt;&gt; write_lines(\"output.txt\", [\"line 1\n“,”line 2 “], debug=True) ‘line 1 line 2’",
    "crumbs": [
      "API",
      "Modules",
      "release"
    ]
  },
  {
    "objectID": "reference/docs.html",
    "href": "reference/docs.html",
    "title": "docs",
    "section": "",
    "text": "docs\nModule for managing documentation versions.\nDetermine the appropriate version and alias for the documentation website based on the latest release tag and the current hash.\n\n\n\n\n\nName\nDescription\n\n\n\n\naction_markdown_desc\nGenerates a markdown formatted description for a given action.\n\n\naction_markdown_header\nGenerates a markdown header for a given action.\n\n\naction_markdown_io\nGenerates a markdown string documenting the inputs and outputs of a given action.\n\n\nget_docs_version\nGet correct version and alias for documentation website.\n\n\nparse_action_yaml\nParses a YAML file and returns its contents as a dictionary.\n\n\nset_docs_version\nSet version and alias in GitHub environment variables for docs website action.\n\n\n\n\n\ndocs.action_markdown_desc(action_dict)\nGenerates a markdown formatted description for a given action.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\naction_dict\ndict\nA dictionary containing action details. Expected keys are: - “name” (str): The name of the action. - “description” (str): A brief description of the action.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nA markdown formatted string with the action name in bold and code format, followed by the description.\n\n\n\n\n\n\n\ndocs.action_markdown_header(action_dict)\nGenerates a markdown header for a given action.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\naction_dict\ndict\nA dictionary containing action details. Expected keys are: - “name” (str): The name of the action. - “description” (str): A brief description of the action.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nA formatted markdown string with the action’s name as a header and the description as the content.\n\n\n\n\n\n\n\ndocs.action_markdown_io(action_dict)\nGenerates a markdown string documenting the inputs and outputs of a given action.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\naction_dict\ndict\nA dictionary containing the action’s inputs and outputs. The dictionary should have the following structure: { “inputs”: { “input_name”: { “description”: “Description of the input”, “required”: bool, “default”: “default_value” }, … }, “outputs”: { “output_name”: { “description”: “Description of the output” }, … } }\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nA markdown formatted string documenting the inputs and outputs of the action.\n\n\n\n\n\n\n\ndocs.get_docs_version(release_args='')\nGet correct version and alias for documentation website.\nDetermines the appropriate version and alias for the documentation based on the latest release tag and the current hash.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrelease_args\nstr\nAdditional arguments to pass to the gh release GitHub CLI command (default is ““).\n''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ntuple\n\nA tuple containing: - docs_version (str): The major and minor version of the latest release. - docs_alias (str): The alias for the documentation version, e.g., “latest”.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf the current commit hash is not a descendant of the latest release.\n\n\n\n\n\n\nset_docs_version: Sets the version and alias in the GitHub environment.\n\n\n\n&gt;&gt;&gt; get_docs_version()\n('1.0', 'latest')\n\n\n\n\ndocs.parse_action_yaml(filename)\nParses a YAML file and returns its contents as a dictionary.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfilename\nstr\nThe path to the YAML file to be parsed.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndict\n\nThe contents of the YAML file as a dictionary.\n\n\n\n\n\n\n\ndocs.set_docs_version()\nSet version and alias in GitHub environment variables for docs website action.\nThis function retrieves the documentation version and alias using get_docs_version and sets them as environment variables in the GitHub Actions environment.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf the current commit hash is not a descendant of the latest release.\n\n\n\n\n\n\nget_docs_version: Retrieves the documentation version and alias. set_output: Sets the GitHub Actions environment variable.\n\n\n\n&gt;&gt;&gt; set_docs_version()",
    "crumbs": [
      "API",
      "Modules",
      "docs"
    ]
  },
  {
    "objectID": "reference/docs.html#functions",
    "href": "reference/docs.html#functions",
    "title": "docs",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\naction_markdown_desc\nGenerates a markdown formatted description for a given action.\n\n\naction_markdown_header\nGenerates a markdown header for a given action.\n\n\naction_markdown_io\nGenerates a markdown string documenting the inputs and outputs of a given action.\n\n\nget_docs_version\nGet correct version and alias for documentation website.\n\n\nparse_action_yaml\nParses a YAML file and returns its contents as a dictionary.\n\n\nset_docs_version\nSet version and alias in GitHub environment variables for docs website action.\n\n\n\n\n\ndocs.action_markdown_desc(action_dict)\nGenerates a markdown formatted description for a given action.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\naction_dict\ndict\nA dictionary containing action details. Expected keys are: - “name” (str): The name of the action. - “description” (str): A brief description of the action.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nA markdown formatted string with the action name in bold and code format, followed by the description.\n\n\n\n\n\n\n\ndocs.action_markdown_header(action_dict)\nGenerates a markdown header for a given action.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\naction_dict\ndict\nA dictionary containing action details. Expected keys are: - “name” (str): The name of the action. - “description” (str): A brief description of the action.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nA formatted markdown string with the action’s name as a header and the description as the content.\n\n\n\n\n\n\n\ndocs.action_markdown_io(action_dict)\nGenerates a markdown string documenting the inputs and outputs of a given action.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\naction_dict\ndict\nA dictionary containing the action’s inputs and outputs. The dictionary should have the following structure: { “inputs”: { “input_name”: { “description”: “Description of the input”, “required”: bool, “default”: “default_value” }, … }, “outputs”: { “output_name”: { “description”: “Description of the output” }, … } }\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nA markdown formatted string documenting the inputs and outputs of the action.\n\n\n\n\n\n\n\ndocs.get_docs_version(release_args='')\nGet correct version and alias for documentation website.\nDetermines the appropriate version and alias for the documentation based on the latest release tag and the current hash.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrelease_args\nstr\nAdditional arguments to pass to the gh release GitHub CLI command (default is ““).\n''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ntuple\n\nA tuple containing: - docs_version (str): The major and minor version of the latest release. - docs_alias (str): The alias for the documentation version, e.g., “latest”.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf the current commit hash is not a descendant of the latest release.\n\n\n\n\n\n\nset_docs_version: Sets the version and alias in the GitHub environment.\n\n\n\n&gt;&gt;&gt; get_docs_version()\n('1.0', 'latest')\n\n\n\n\ndocs.parse_action_yaml(filename)\nParses a YAML file and returns its contents as a dictionary.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfilename\nstr\nThe path to the YAML file to be parsed.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndict\n\nThe contents of the YAML file as a dictionary.\n\n\n\n\n\n\n\ndocs.set_docs_version()\nSet version and alias in GitHub environment variables for docs website action.\nThis function retrieves the documentation version and alias using get_docs_version and sets them as environment variables in the GitHub Actions environment.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf the current commit hash is not a descendant of the latest release.\n\n\n\n\n\n\nget_docs_version: Retrieves the documentation version and alias. set_output: Sets the GitHub Actions environment variable.\n\n\n\n&gt;&gt;&gt; set_docs_version()",
    "crumbs": [
      "API",
      "Modules",
      "docs"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "API Reference",
    "section": "",
    "text": "actions\nDownload and use GitHub Actions workflow files.\n\n\ncitation\nPrint and update citation files in CFF format.\n\n\ndata\nData files for CCBR actions\n\n\ndocs\nModule for managing documentation versions.\n\n\nrelease\nHelpers for drafting releases and cleaning up after releases are published.\n\n\nutil\nUtility functions for the package\n\n\nversions\nGet information from git tags, commit hashes, and GitHub releases.",
    "crumbs": [
      "API",
      "API Reference"
    ]
  },
  {
    "objectID": "reference/index.html#modules",
    "href": "reference/index.html#modules",
    "title": "API Reference",
    "section": "",
    "text": "actions\nDownload and use GitHub Actions workflow files.\n\n\ncitation\nPrint and update citation files in CFF format.\n\n\ndata\nData files for CCBR actions\n\n\ndocs\nModule for managing documentation versions.\n\n\nrelease\nHelpers for drafting releases and cleaning up after releases are published.\n\n\nutil\nUtility functions for the package\n\n\nversions\nGet information from git tags, commit hashes, and GitHub releases.",
    "crumbs": [
      "API",
      "API Reference"
    ]
  },
  {
    "objectID": "reference/data.html",
    "href": "reference/data.html",
    "title": "data",
    "section": "",
    "text": "data\nData files for CCBR actions\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_file_path\nGet the file path for a given filename within the package.\n\n\n\n\n\ndata.get_file_path(filename)\nGet the file path for a given filename within the package.\nThis function retrieves the path to a specified file within the package’s data files using the importlib.resources module.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfilename\nstr\nThe name of the file for which to retrieve the path.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\npathlib.Path: The path to the specified file within the package.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nFileNotFoundError\nIf the specified file is not found within the package data.\n\n\n\n\n\n\n&gt;&gt;&gt; get_file_path('tool_version_commands.json')\nPosixPath('/path/to/package/tool_version_commands.json')",
    "crumbs": [
      "API",
      "Modules",
      "data"
    ]
  },
  {
    "objectID": "reference/data.html#functions",
    "href": "reference/data.html#functions",
    "title": "data",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nget_file_path\nGet the file path for a given filename within the package.\n\n\n\n\n\ndata.get_file_path(filename)\nGet the file path for a given filename within the package.\nThis function retrieves the path to a specified file within the package’s data files using the importlib.resources module.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfilename\nstr\nThe name of the file for which to retrieve the path.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\npathlib.Path: The path to the specified file within the package.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nFileNotFoundError\nIf the specified file is not found within the package data.\n\n\n\n\n\n\n&gt;&gt;&gt; get_file_path('tool_version_commands.json')\nPosixPath('/path/to/package/tool_version_commands.json')",
    "crumbs": [
      "API",
      "Modules",
      "data"
    ]
  },
  {
    "objectID": "reference/versions.html",
    "href": "reference/versions.html",
    "title": "versions",
    "section": "",
    "text": "versions\nGet information from git tags, commit hashes, and GitHub releases.\n\n\n\n\n\nName\nDescription\n\n\n\n\ncheck_version_increments_by_one\nChecks if the next version increments by exactly 1 digit from the current version.\n\n\nget_current_hash\nGet the current commit hash.\n\n\nget_latest_release_hash\nGet the commit hash of the latest release.\n\n\nget_latest_release_tag\nGet the tag name of the latest release.\n\n\nget_major_minor_version\nExtract the major and minor version from a semantic versioning string.\n\n\nget_releases\nGet a list of releases from GitHub.\n\n\nis_ancestor\nCheck if one commit is an ancestor of another.\n\n\nmatch_semver\nMatch a version string against the semantic versioning pattern.\n\n\n\n\n\nversions.check_version_increments_by_one(\n    current_version,\n    next_version,\n    with_leading_v=False,\n    error_on_false=True,\n    debug=False,\n)\nChecks if the next version increments by exactly 1 digit from the current version.\nEnsures that the next version follows semantic versioning guidelines and increments only one of the major, minor, or patch numbers by 1.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncurrent_version\nstr\nThe current version string.\nrequired\n\n\nnext_version\nstr\nThe proposed next version string.\nrequired\n\n\nwith_leading_v\nbool\nIf True, expects the version strings to start with ‘v’. Defaults to False.\nFalse\n\n\nerror_on_false\nbool\nIf True, raises a ValueError when the check fails. Defaults to True.\nTrue\n\n\ndebug\nbool\nIf True, prints debug information. Defaults to False.\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nbool\n\nTrue if the next version increments by exactly one, False otherwise.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf the next version does not match semantic versioning guidelines or does not increment by exactly one.\n\n\n\n\n\n\n&gt;&gt;&gt; check_version_increments_by_one(\"1.0.0\", \"1.0.1\")\nTrue\n&gt;&gt;&gt; check_version_increments_by_one(\"1.0.0\", \"1.1.0\")\nTrue\n&gt;&gt;&gt; check_version_increments_by_one(\"1.0.0\", \"2.0.0\")\nTrue\n&gt;&gt;&gt; check_version_increments_by_one(\"1.0.0\", \"1.0.2\")\nFalse\n&gt;&gt;&gt; check_version_increments_by_one(\"1.0.0\", \"1.2.0\")\nFalse\n&gt;&gt;&gt; check_version_increments_by_one(\"1.0.0\", \"3.0.0\")\nFalse\n\n\n\n\nversions.get_current_hash()\nGet the current commit hash.\nUses git rev-parse HEAD to get the current commit hash.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nThe current commit hash.\n\n\n\n\n\n\nget_latest_release_hash : Get the commit hash of the latest release.\n\n\n\n&gt;&gt;&gt; get_current_hash()\n'abc123def4567890abcdef1234567890abcdef12'\n\n\n\n\nversions.get_latest_release_hash(args='')\nGet the commit hash of the latest release.\nUses git rev-list to get the commit hash of the latest release tag.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nstr\nAdditional arguments to pass to the GitHub CLI command (default is ““).\n''\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nThe commit hash of the latest release.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf the tag is not found in the repository commit history.\n\n\n\n\n\n\nget_latest_release_tag: Get the tag name of the latest release.\n\n\n\n&gt;&gt;&gt; get_latest_release_hash()\n'abc123def4567890abcdef1234567890abcdef12'\n\n\n\n\nversions.get_latest_release_tag(args='')\nGet the tag name of the latest release.\nUses the GitHub CLI to retrieve the latest release tag from a repository.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nstr\nAdditional arguments to pass to the GitHub CLI command (default is ““).\n''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\nstr or None: The tag name of the latest release, or None if no latest release is found.\n\n\n\n\n\n\nget_releases: Get a list of releases from GitHub.\n\n\n\n&gt;&gt;&gt; get_latest_release_tag()\n'v1.0.0'\n\n\n\n\nversions.get_major_minor_version(version_str, with_leading_v=False)\nExtract the major and minor version from a semantic versioning string.\nSee the semantic versioning guidelines: https://semver.org/\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nversion_str\nstr\nThe version string to extract from.\nrequired\n\n\nwith_leading_v\nbool\nWhether to include a leading ‘v’ in the output.\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\nstr or None: The major and minor version in the format ‘major.minor’, or None if the version string is invalid.\n\n\n\n\n\n\nmatch_semver: Match a version string against the semantic versioning pattern.\n\n\n\n&gt;&gt;&gt; get_major_minor_version(\"1.0.0\")\n'1.0'\n&gt;&gt;&gt; get_major_minor_version(\"2.1.3-alpha\")\n'2.1'\n&gt;&gt;&gt; get_major_minor_version(\"invalid_version\")\nNone\n\n\n\n\nversions.get_releases(\n    limit=1,\n    args='',\n    json_fields='name,tagName,isLatest,publishedAt',\n)\nGet a list of releases from GitHub.\nUses the GitHub CLI to retrieve a list of releases from a repository.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlimit\nint\nThe maximum number of releases to retrieve (default is 1).\n1\n\n\nargs\nstr\nAdditional arguments to pass to the GitHub CLI command (default is ““).\n''\n\n\njson_fields\nstr\nThe JSON fields to include in the output (default is “name,tagName,isLatest,publishedAt”).\n'name,tagName,isLatest,publishedAt'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nlist\n\nA list of dictionaries containing release information.\n\n\n\n\n\n\nget_latest_release_tag : Get the tag name of the latest release. get_latest_release_hash : Get the commit hash of the latest release.\n\n\n\ngh cli docs: https://cli.github.com/manual/gh_release_list\n\n\n\n&gt;&gt;&gt; get_releases(limit=2)\n[{'name': 'v1.0.0', 'tagName': 'v1.0.0', 'isLatest': True, 'publishedAt': '2021-01-01T00:00:00Z'},\n{'name': 'v0.9.0', 'tagName': 'v0.9.0', 'isLatest': False, 'publishedAt': '2020-12-01T00:00:00Z'}]\n&gt;&gt;&gt; get_releases(limit=2, args=\"--repo CCBR/RENEE\")\n[{'isLatest': True, 'name': 'RENEE 2.5.12', 'publishedAt': '2024-04-12T14:49:11Z', 'tagName': 'v2.5.12'},\n{'isLatest': False, 'name': 'RENEE 2.5.11', 'publishedAt': '2024-01-22T21:02:30Z', 'tagName': 'v2.5.11'}]\n\n\n\n\nversions.is_ancestor(ancestor, descendant)\nCheck if one commit is an ancestor of another.\nUses git merge-base –is-ancestor to determine if the ancestor is an ancestor of the descendant.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nancestor\nstr\nThe commit hash of the potential ancestor.\nrequired\n\n\ndescendant\nstr\nThe commit hash of the potential descendant.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nbool\n\nTrue if the ancestor is an ancestor of the descendant, otherwise False.\n\n\n\n\n\n\nget_latest_release_hash : Get the commit hash of the latest release. get_current_hash : Get the commit hash of the current.\n\n\n\n&gt;&gt;&gt; is_ancestor(\"abc123\", \"def456\")\nTrue\n&gt;&gt;&gt; is_ancestor(\"abc123\", \"ghi789\")\nFalse\n\n\n\n\nversions.match_semver(version_str, with_leading_v=False)\nMatch a version string against the semantic versioning pattern.\nSee the semantic versioning guidelines: https://semver.org/\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nversion_str\nstr\nThe version string to match against the semantic versioning pattern.\nrequired\n\n\nwith_leading_v\nbool\nIf True, the version string is expected to start with a leading ‘v’.\nFalse\n\n\nre.Match\nor None\nThe match object if the version string matches the semantic versioning pattern, otherwise None.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\nre.Match or None The match object if the version string matches the semantic versioning pattern, otherwise None.\n\n\n\n\n\n\nget_major_minor_version : Extract the major and minor version from a semantic versioning string.\n\n\n\n&gt;&gt;&gt; match_semver(\"1.0.0\")\n&lt;re.Match object; span=(0, 5), match='1.0.0'&gt;\n&gt;&gt;&gt; match_semver(\"1.0.0-alpha+001\")\n&lt;re.Match object; span=(0, 13), match='1.0.0-alpha+001'&gt;\n&gt;&gt;&gt; match_semver(\"invalid_version\")\nNone",
    "crumbs": [
      "API",
      "Modules",
      "versions"
    ]
  },
  {
    "objectID": "reference/versions.html#functions",
    "href": "reference/versions.html#functions",
    "title": "versions",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncheck_version_increments_by_one\nChecks if the next version increments by exactly 1 digit from the current version.\n\n\nget_current_hash\nGet the current commit hash.\n\n\nget_latest_release_hash\nGet the commit hash of the latest release.\n\n\nget_latest_release_tag\nGet the tag name of the latest release.\n\n\nget_major_minor_version\nExtract the major and minor version from a semantic versioning string.\n\n\nget_releases\nGet a list of releases from GitHub.\n\n\nis_ancestor\nCheck if one commit is an ancestor of another.\n\n\nmatch_semver\nMatch a version string against the semantic versioning pattern.\n\n\n\n\n\nversions.check_version_increments_by_one(\n    current_version,\n    next_version,\n    with_leading_v=False,\n    error_on_false=True,\n    debug=False,\n)\nChecks if the next version increments by exactly 1 digit from the current version.\nEnsures that the next version follows semantic versioning guidelines and increments only one of the major, minor, or patch numbers by 1.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncurrent_version\nstr\nThe current version string.\nrequired\n\n\nnext_version\nstr\nThe proposed next version string.\nrequired\n\n\nwith_leading_v\nbool\nIf True, expects the version strings to start with ‘v’. Defaults to False.\nFalse\n\n\nerror_on_false\nbool\nIf True, raises a ValueError when the check fails. Defaults to True.\nTrue\n\n\ndebug\nbool\nIf True, prints debug information. Defaults to False.\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nbool\n\nTrue if the next version increments by exactly one, False otherwise.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf the next version does not match semantic versioning guidelines or does not increment by exactly one.\n\n\n\n\n\n\n&gt;&gt;&gt; check_version_increments_by_one(\"1.0.0\", \"1.0.1\")\nTrue\n&gt;&gt;&gt; check_version_increments_by_one(\"1.0.0\", \"1.1.0\")\nTrue\n&gt;&gt;&gt; check_version_increments_by_one(\"1.0.0\", \"2.0.0\")\nTrue\n&gt;&gt;&gt; check_version_increments_by_one(\"1.0.0\", \"1.0.2\")\nFalse\n&gt;&gt;&gt; check_version_increments_by_one(\"1.0.0\", \"1.2.0\")\nFalse\n&gt;&gt;&gt; check_version_increments_by_one(\"1.0.0\", \"3.0.0\")\nFalse\n\n\n\n\nversions.get_current_hash()\nGet the current commit hash.\nUses git rev-parse HEAD to get the current commit hash.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nThe current commit hash.\n\n\n\n\n\n\nget_latest_release_hash : Get the commit hash of the latest release.\n\n\n\n&gt;&gt;&gt; get_current_hash()\n'abc123def4567890abcdef1234567890abcdef12'\n\n\n\n\nversions.get_latest_release_hash(args='')\nGet the commit hash of the latest release.\nUses git rev-list to get the commit hash of the latest release tag.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nstr\nAdditional arguments to pass to the GitHub CLI command (default is ““).\n''\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nThe commit hash of the latest release.\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nValueError\nIf the tag is not found in the repository commit history.\n\n\n\n\n\n\nget_latest_release_tag: Get the tag name of the latest release.\n\n\n\n&gt;&gt;&gt; get_latest_release_hash()\n'abc123def4567890abcdef1234567890abcdef12'\n\n\n\n\nversions.get_latest_release_tag(args='')\nGet the tag name of the latest release.\nUses the GitHub CLI to retrieve the latest release tag from a repository.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nstr\nAdditional arguments to pass to the GitHub CLI command (default is ““).\n''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\nstr or None: The tag name of the latest release, or None if no latest release is found.\n\n\n\n\n\n\nget_releases: Get a list of releases from GitHub.\n\n\n\n&gt;&gt;&gt; get_latest_release_tag()\n'v1.0.0'\n\n\n\n\nversions.get_major_minor_version(version_str, with_leading_v=False)\nExtract the major and minor version from a semantic versioning string.\nSee the semantic versioning guidelines: https://semver.org/\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nversion_str\nstr\nThe version string to extract from.\nrequired\n\n\nwith_leading_v\nbool\nWhether to include a leading ‘v’ in the output.\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\nstr or None: The major and minor version in the format ‘major.minor’, or None if the version string is invalid.\n\n\n\n\n\n\nmatch_semver: Match a version string against the semantic versioning pattern.\n\n\n\n&gt;&gt;&gt; get_major_minor_version(\"1.0.0\")\n'1.0'\n&gt;&gt;&gt; get_major_minor_version(\"2.1.3-alpha\")\n'2.1'\n&gt;&gt;&gt; get_major_minor_version(\"invalid_version\")\nNone\n\n\n\n\nversions.get_releases(\n    limit=1,\n    args='',\n    json_fields='name,tagName,isLatest,publishedAt',\n)\nGet a list of releases from GitHub.\nUses the GitHub CLI to retrieve a list of releases from a repository.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlimit\nint\nThe maximum number of releases to retrieve (default is 1).\n1\n\n\nargs\nstr\nAdditional arguments to pass to the GitHub CLI command (default is ““).\n''\n\n\njson_fields\nstr\nThe JSON fields to include in the output (default is “name,tagName,isLatest,publishedAt”).\n'name,tagName,isLatest,publishedAt'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nlist\n\nA list of dictionaries containing release information.\n\n\n\n\n\n\nget_latest_release_tag : Get the tag name of the latest release. get_latest_release_hash : Get the commit hash of the latest release.\n\n\n\ngh cli docs: https://cli.github.com/manual/gh_release_list\n\n\n\n&gt;&gt;&gt; get_releases(limit=2)\n[{'name': 'v1.0.0', 'tagName': 'v1.0.0', 'isLatest': True, 'publishedAt': '2021-01-01T00:00:00Z'},\n{'name': 'v0.9.0', 'tagName': 'v0.9.0', 'isLatest': False, 'publishedAt': '2020-12-01T00:00:00Z'}]\n&gt;&gt;&gt; get_releases(limit=2, args=\"--repo CCBR/RENEE\")\n[{'isLatest': True, 'name': 'RENEE 2.5.12', 'publishedAt': '2024-04-12T14:49:11Z', 'tagName': 'v2.5.12'},\n{'isLatest': False, 'name': 'RENEE 2.5.11', 'publishedAt': '2024-01-22T21:02:30Z', 'tagName': 'v2.5.11'}]\n\n\n\n\nversions.is_ancestor(ancestor, descendant)\nCheck if one commit is an ancestor of another.\nUses git merge-base –is-ancestor to determine if the ancestor is an ancestor of the descendant.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nancestor\nstr\nThe commit hash of the potential ancestor.\nrequired\n\n\ndescendant\nstr\nThe commit hash of the potential descendant.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nbool\n\nTrue if the ancestor is an ancestor of the descendant, otherwise False.\n\n\n\n\n\n\nget_latest_release_hash : Get the commit hash of the latest release. get_current_hash : Get the commit hash of the current.\n\n\n\n&gt;&gt;&gt; is_ancestor(\"abc123\", \"def456\")\nTrue\n&gt;&gt;&gt; is_ancestor(\"abc123\", \"ghi789\")\nFalse\n\n\n\n\nversions.match_semver(version_str, with_leading_v=False)\nMatch a version string against the semantic versioning pattern.\nSee the semantic versioning guidelines: https://semver.org/\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nversion_str\nstr\nThe version string to match against the semantic versioning pattern.\nrequired\n\n\nwith_leading_v\nbool\nIf True, the version string is expected to start with a leading ‘v’.\nFalse\n\n\nre.Match\nor None\nThe match object if the version string matches the semantic versioning pattern, otherwise None.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\nre.Match or None The match object if the version string matches the semantic versioning pattern, otherwise None.\n\n\n\n\n\n\nget_major_minor_version : Extract the major and minor version from a semantic versioning string.\n\n\n\n&gt;&gt;&gt; match_semver(\"1.0.0\")\n&lt;re.Match object; span=(0, 5), match='1.0.0'&gt;\n&gt;&gt;&gt; match_semver(\"1.0.0-alpha+001\")\n&lt;re.Match object; span=(0, 13), match='1.0.0-alpha+001'&gt;\n&gt;&gt;&gt; match_semver(\"invalid_version\")\nNone",
    "crumbs": [
      "API",
      "Modules",
      "versions"
    ]
  },
  {
    "objectID": "reference/actions.html",
    "href": "reference/actions.html",
    "title": "actions",
    "section": "",
    "text": "actions\nDownload and use GitHub Actions workflow files.\n\n\nget_latest_release_tag : Get the latest release tag from a GitHub repository.\n\n\n\n&gt;&gt;&gt; use_github_action(\"docs-mkdocs\")\n&gt;&gt;&gt; use_github_action(\"docs-mkdocs\", ref=\"v1.0.0\")\n&gt;&gt;&gt; use_github_action(\"docs-mkdocs\", save_as=\"custom/path/example-action.yml\")\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nset_output\nSet a GitHub Actions output variable.\n\n\nuse_github_action\nDownload an example GitHub Actions workflow file from CCBR/actions.\n\n\n\n\n\nactions.set_output(name, value, environ='GITHUB_OUTPUT')\nSet a GitHub Actions output variable.\nWrite the given name and value to the GitHub Actions environment file specified by the GITHUB_OUTPUT environment variable. You can then access the variable in GitHub Actions using ${{ steps.&lt;step_id&gt;.outputs.&lt;name&gt; }}.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nThe name of the output variable to set.\nrequired\n\n\nvalue\nstr\nThe value of the output variable to set.\nrequired\n\n\nenviron\nstr\nThe environment variable that specifies the GitHub Actions environment file. Defaults to “GITHUB_OUTPUT”.\n'GITHUB_OUTPUT'\n\n\n\n\n\n\n&gt;&gt;&gt; set_output(\"VERSION\", \"1.0.0\")\n&gt;&gt;&gt; set_output(\"ALIAS\", \"latest\")\n\n\n\n\nactions.use_github_action(\n    name,\n    ref=None,\n    url=None,\n    save_as=None,\n    repo='CCBR/actions',\n)\nDownload an example GitHub Actions workflow file from CCBR/actions.\nThis function was inspired by {usethis}: https://usethis.r-lib.org/reference/github_actions.html\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nThe name of the GitHub Actions workflow file to download.\nrequired\n\n\nref\nstr\nThe git reference (branch, tag, or commit SHA) to use. Defaults to None, in which case the latest release or “main” is used.\nNone\n\n\nurl\nstr\nThe URL to download the workflow file from. Defaults to building it based on the repo and ref.\nNone\n\n\nsave_as\nstr\nThe path to save the downloaded workflow file. Defaults to building it based on .github/workflows/name.yml.\nNone\n\n\nrepo\nstr\nThe GitHub repository to download the workflow file from. Defaults to “CCBR/actions”.\n'CCBR/actions'\n\n\n\n\n\n\nget_latest_release_tag: Get the latest release tag from a GitHub repository. get_docs_version: Get the documentation version and alias.\n\n\n\nIf ref is not provided, the latest release tag is used (if available) or main. If url is not provided, the URL is constructed based on the repository and reference. If save_as is not provided, the file is saved in the .github/workflows directory.\n\n\n\n&gt;&gt;&gt; use_github_action(\"docs-mkdocs\")\n&gt;&gt;&gt; use_github_action(\"docs-mkdocs\", ref=\"v1.0.0\")\n&gt;&gt;&gt; use_github_action(\"docs-mkdocs\", save_as=\"custom/path/example-action.yml\")",
    "crumbs": [
      "API",
      "Modules",
      "actions"
    ]
  },
  {
    "objectID": "reference/actions.html#see-also",
    "href": "reference/actions.html#see-also",
    "title": "actions",
    "section": "",
    "text": "get_latest_release_tag : Get the latest release tag from a GitHub repository.",
    "crumbs": [
      "API",
      "Modules",
      "actions"
    ]
  },
  {
    "objectID": "reference/actions.html#examples",
    "href": "reference/actions.html#examples",
    "title": "actions",
    "section": "",
    "text": "&gt;&gt;&gt; use_github_action(\"docs-mkdocs\")\n&gt;&gt;&gt; use_github_action(\"docs-mkdocs\", ref=\"v1.0.0\")\n&gt;&gt;&gt; use_github_action(\"docs-mkdocs\", save_as=\"custom/path/example-action.yml\")",
    "crumbs": [
      "API",
      "Modules",
      "actions"
    ]
  },
  {
    "objectID": "reference/actions.html#functions",
    "href": "reference/actions.html#functions",
    "title": "actions",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nset_output\nSet a GitHub Actions output variable.\n\n\nuse_github_action\nDownload an example GitHub Actions workflow file from CCBR/actions.\n\n\n\n\n\nactions.set_output(name, value, environ='GITHUB_OUTPUT')\nSet a GitHub Actions output variable.\nWrite the given name and value to the GitHub Actions environment file specified by the GITHUB_OUTPUT environment variable. You can then access the variable in GitHub Actions using ${{ steps.&lt;step_id&gt;.outputs.&lt;name&gt; }}.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nThe name of the output variable to set.\nrequired\n\n\nvalue\nstr\nThe value of the output variable to set.\nrequired\n\n\nenviron\nstr\nThe environment variable that specifies the GitHub Actions environment file. Defaults to “GITHUB_OUTPUT”.\n'GITHUB_OUTPUT'\n\n\n\n\n\n\n&gt;&gt;&gt; set_output(\"VERSION\", \"1.0.0\")\n&gt;&gt;&gt; set_output(\"ALIAS\", \"latest\")\n\n\n\n\nactions.use_github_action(\n    name,\n    ref=None,\n    url=None,\n    save_as=None,\n    repo='CCBR/actions',\n)\nDownload an example GitHub Actions workflow file from CCBR/actions.\nThis function was inspired by {usethis}: https://usethis.r-lib.org/reference/github_actions.html\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nThe name of the GitHub Actions workflow file to download.\nrequired\n\n\nref\nstr\nThe git reference (branch, tag, or commit SHA) to use. Defaults to None, in which case the latest release or “main” is used.\nNone\n\n\nurl\nstr\nThe URL to download the workflow file from. Defaults to building it based on the repo and ref.\nNone\n\n\nsave_as\nstr\nThe path to save the downloaded workflow file. Defaults to building it based on .github/workflows/name.yml.\nNone\n\n\nrepo\nstr\nThe GitHub repository to download the workflow file from. Defaults to “CCBR/actions”.\n'CCBR/actions'\n\n\n\n\n\n\nget_latest_release_tag: Get the latest release tag from a GitHub repository. get_docs_version: Get the documentation version and alias.\n\n\n\nIf ref is not provided, the latest release tag is used (if available) or main. If url is not provided, the URL is constructed based on the repository and reference. If save_as is not provided, the file is saved in the .github/workflows directory.\n\n\n\n&gt;&gt;&gt; use_github_action(\"docs-mkdocs\")\n&gt;&gt;&gt; use_github_action(\"docs-mkdocs\", ref=\"v1.0.0\")\n&gt;&gt;&gt; use_github_action(\"docs-mkdocs\", save_as=\"custom/path/example-action.yml\")",
    "crumbs": [
      "API",
      "Modules",
      "actions"
    ]
  },
  {
    "objectID": "reference/util.html",
    "href": "reference/util.html",
    "title": "util",
    "section": "",
    "text": "util\nUtility functions for the package\n\n\n\n\n\nName\nDescription\n\n\n\n\ndate_today\nReturns the current date in ISO8601-compliant format (YYYY-MM-DD).\n\n\npath_resolve\nResolves the given filepath to an absolute path.\n\n\nprecommit_run\nRun pre-commit run with the specified arguments.\n\n\n\n\n\nutil.date_today()\nReturns the current date in ISO8601-compliant format (YYYY-MM-DD).\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nThe current date as a string in the format YYYY-MM-DD.\n\n\n\n\n\n\n\nutil.path_resolve(filepath)\nResolves the given filepath to an absolute path.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfilepath\nstr\nThe path to be resolved.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\npathlib.Path: The resolved absolute path.\n\n\n\n\n\n\n\nutil.precommit_run(args)\nRun pre-commit run with the specified arguments.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nstr\nThe arguments to pass to the pre-commit command.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\nsubprocess.CompletedProcess: The result of the shell command execution.",
    "crumbs": [
      "API",
      "Modules",
      "util"
    ]
  },
  {
    "objectID": "reference/util.html#functions",
    "href": "reference/util.html#functions",
    "title": "util",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ndate_today\nReturns the current date in ISO8601-compliant format (YYYY-MM-DD).\n\n\npath_resolve\nResolves the given filepath to an absolute path.\n\n\nprecommit_run\nRun pre-commit run with the specified arguments.\n\n\n\n\n\nutil.date_today()\nReturns the current date in ISO8601-compliant format (YYYY-MM-DD).\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nstr\n\nThe current date as a string in the format YYYY-MM-DD.\n\n\n\n\n\n\n\nutil.path_resolve(filepath)\nResolves the given filepath to an absolute path.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfilepath\nstr\nThe path to be resolved.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\npathlib.Path: The resolved absolute path.\n\n\n\n\n\n\n\nutil.precommit_run(args)\nRun pre-commit run with the specified arguments.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nargs\nstr\nThe arguments to pass to the pre-commit command.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\n\nsubprocess.CompletedProcess: The result of the shell command execution.",
    "crumbs": [
      "API",
      "Modules",
      "util"
    ]
  },
  {
    "objectID": "reference/citation.html",
    "href": "reference/citation.html",
    "title": "citation",
    "section": "",
    "text": "citation\nPrint and update citation files in CFF format.\n\n\n\n\n\nName\nDescription\n\n\n\n\nprint_citation\nPrint the citation in the specified format.\n\n\nupdate_citation\nUpdate the citation file with the specified version and date.\n\n\n\n\n\ncitation.print_citation(citation_file='CITATION.cff', output_format='bibtex')\nPrint the citation in the specified format.\nThis function reads a citation file in CFF format and prints it in the specified output format using the cffconvert library.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncitation_file\nstr\nThe path to the citation file (default is “CITATION.cff”).\n'CITATION.cff'\n\n\noutput_format\nstr\nThe format to print the citation in (default is “bibtex”).\n'bibtex'\n\n\n\n\n\n\n&gt;&gt;&gt; print_citation()\n@article{...\n\n\n\n\ncitation.update_citation(\n    citation_file='CITATION.cff',\n    version='${{ steps.set-version.output.NEXT_VERSION }}',\n    date=date_today(),\n    debug=False,\n)\nUpdate the citation file with the specified version and date.\nThis function updates the version and date-released fields in the citation file and writes the updated content back to the file.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncitation_file\nstr\nThe path to the citation file (default is “CITATION.cff”).\n'CITATION.cff'\n\n\nversion\nstr\nThe version to set in the citation file (default is “\\({{ steps.set-version.output.NEXT_VERSION }}\"). | `'\\){{ steps.set-version.output.NEXT_VERSION }}’| | date          | [str](str)   | The release date to set in the citation file (default is today's date).                              |date_today()| | debug         | [bool](bool) | If True, print the updated citation content instead of writing to the file (default is False).       |False`\n\n\n\n\n\n\n\n&gt;&gt;&gt; update_citation(version=\"1.0.1\", date=\"2023-10-01\")",
    "crumbs": [
      "API",
      "Modules",
      "citation"
    ]
  },
  {
    "objectID": "reference/citation.html#functions",
    "href": "reference/citation.html#functions",
    "title": "citation",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nprint_citation\nPrint the citation in the specified format.\n\n\nupdate_citation\nUpdate the citation file with the specified version and date.\n\n\n\n\n\ncitation.print_citation(citation_file='CITATION.cff', output_format='bibtex')\nPrint the citation in the specified format.\nThis function reads a citation file in CFF format and prints it in the specified output format using the cffconvert library.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncitation_file\nstr\nThe path to the citation file (default is “CITATION.cff”).\n'CITATION.cff'\n\n\noutput_format\nstr\nThe format to print the citation in (default is “bibtex”).\n'bibtex'\n\n\n\n\n\n\n&gt;&gt;&gt; print_citation()\n@article{...\n\n\n\n\ncitation.update_citation(\n    citation_file='CITATION.cff',\n    version='${{ steps.set-version.output.NEXT_VERSION }}',\n    date=date_today(),\n    debug=False,\n)\nUpdate the citation file with the specified version and date.\nThis function updates the version and date-released fields in the citation file and writes the updated content back to the file.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncitation_file\nstr\nThe path to the citation file (default is “CITATION.cff”).\n'CITATION.cff'\n\n\nversion\nstr\nThe version to set in the citation file (default is “\\({{ steps.set-version.output.NEXT_VERSION }}\"). | `'\\){{ steps.set-version.output.NEXT_VERSION }}’| | date          | [str](str)   | The release date to set in the citation file (default is today's date).                              |date_today()| | debug         | [bool](bool) | If True, print the updated citation content instead of writing to the file (default is False).       |False`\n\n\n\n\n\n\n\n&gt;&gt;&gt; update_citation(version=\"1.0.1\", date=\"2023-10-01\")",
    "crumbs": [
      "API",
      "Modules",
      "citation"
    ]
  },
  {
    "objectID": "actions.html",
    "href": "actions.html",
    "title": "Actions",
    "section": "",
    "text": "Order By\n       Default\n         \n          action\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\naction\n\n\ndescription\n\n\n\n\n\n\nadd-issue-label-list\n\n\nUpdate issue description with a list of issues of a given label\n\n\n\n\nbuild-docker\n\n\nBuild a docker container using CCBR guidelines\n\n\n\n\ndraft-release\n\n\nDraft a new release based on conventional commits and prepare release notes\n\n\n\n\nlabel-issue-repo-name\n\n\nLabel issues & PRs with the repository name\n\n\n\n\nmkdocs-mike\n\n\nDeploy documentation to github pages using mkdocs + mike\n\n\n\n\npost-release\n\n\nPost-release cleanup chores, intended to be triggered by publishing a release\n\n\n\n\n\nNo matching items\n\n\nSee example workflows that use our custom actions here: https://github.com/CCBR/actions/tree/main/examples. You can copy these to your own repository in the .github/workflows/ directory and modify them for your needs.\nView the GitHub Actions docs for more information on how to write and use GitHub Actions workflows."
  },
  {
    "objectID": "actions/label-issue-repo-name/index.html",
    "href": "actions/label-issue-repo-name/index.html",
    "title": "label-issue-repo-name",
    "section": "",
    "text": "label-issue-repo-name - Label issues & PRs with the repository name\nThis action labels issues & PRs with the name of the repository. It is useful for organizing GitHub Project boards with issues from multiple repos."
  },
  {
    "objectID": "actions/label-issue-repo-name/index.html#usage",
    "href": "actions/label-issue-repo-name/index.html#usage",
    "title": "label-issue-repo-name",
    "section": "Usage",
    "text": "Usage\n\nBasic example\nlabel-issues-reponame.yml\nname: label-issues-repo-name\n\non:\n  issues:\n    types:\n      - opened\n  pull_request:\n    types:\n      - opened\n\njobs:\n  add-label:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: CCBR/actions/label-issue-repo-name\n        with:\n          github-token: ${{ github.token }}"
  },
  {
    "objectID": "actions/label-issue-repo-name/index.html#inputs",
    "href": "actions/label-issue-repo-name/index.html#inputs",
    "title": "label-issue-repo-name",
    "section": "Inputs",
    "text": "Inputs\n\ngithub-token: GitHub Actions token (e.g. { github.token }). Required."
  },
  {
    "objectID": "actions/draft-release/index.html",
    "href": "actions/draft-release/index.html",
    "title": "draft-release",
    "section": "",
    "text": "draft-release - Draft a new release based on conventional commits and prepare release notes\nThis action helps create a draft release based on the contents of the changelog and commit history. It is designed to be used in a manually triggered workflow to draft a release. The latest commit in the branch you run the workflow from will be used as the target for the release tag."
  },
  {
    "objectID": "actions/draft-release/index.html#usage",
    "href": "actions/draft-release/index.html#usage",
    "title": "draft-release",
    "section": "Usage",
    "text": "Usage\nInput files:\n\nCHANGELOG.md - a changelog or news file with entries in reverse chronological order. The newest entry should contain a header with the phrase “development version”.\nVERSION - a single-source version file.\nCITATION.cff - a citation file. (optional)\n\nWhen you’re ready to draft a new release, run the workflow manually.\n\nBasic example\ndraft-release.yml\nname: draft-release\n\non:\n  workflow_dispatch:\n    inputs:\n      version-tag:\n        description: |\n          Semantic version tag for next release.\n          If not provided, it will be determined based on conventional commit history.\n          Example: v2.5.11\n        required: false\n        type: string\n        default: \"\"\n\njobs:\n  draft-release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0 # required to include tags\n      - uses: CCBR/actions/draft-release@v0.1\n        with:\n          github-token: ${{ github.token }}\n          version-tag: ${{ github.event.inputs.version-tag }}\n\n\nCustomized inputs\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0 # required to include tags\n      - uses: CCBR/actions/draft-release@main\n        with:\n          github-token: ${{ github.token }}\n          version-tag: ${{ github.event.inputs.version-tag }}\n          ccbr-actions-version: main\n          python-verson: 3.11\n          draft-branch: \"release-draft\"\n          version-filepath: VERSION\n          changelog-filepath: CHANGELOG.md\n          citation-filepath: CITATION.cff\n          dev-header: \"development version\"\n          github-actor: \"41898282+github-actions[bot]\""
  },
  {
    "objectID": "actions/draft-release/index.html#inputs",
    "href": "actions/draft-release/index.html#inputs",
    "title": "draft-release",
    "section": "Inputs",
    "text": "Inputs\n\nversion-tag: Semantic version tag for next release. If not provided, it will be determined based on conventional commit history. Example: v2.5.11 .\ngithub-token: GitHub Actions token (e.g. github.token). Required.\nccbr-actions-version: The version of ccbr_actions to use. Required. Default: main.\npython-version: The version of Python to install. Required. Default: 3.11.\ndraft-branch: The branch name to push changes to for the release draft.. Required. Default: release-draft.\nversion-filepath: Path to the file containing the current version. Default: VERSION.\nchangelog-filepath: Path to the changelog or news file. Default: CHANGELOG.md.\ncitation-filepath: Path to the citation file. Default: CITATION.cff.\ndev-header: Header string to match to find the development version entry in the changelog, typically of the form ‘##  development version’. Default: development version.\ngithub-actor: Username of GitHub actor for the git commit when the docs branch is deployed. Required. Default: 41898282+github-actions[bot]."
  },
  {
    "objectID": "actions/add-issue-label-list/index.html",
    "href": "actions/add-issue-label-list/index.html",
    "title": "add-issue-label-list",
    "section": "",
    "text": "add-issue-label-list - Update issue description with a list of issues of a given label\n\n\nadd-issue-label-list.yml\nname: add-issue-label-list\n\non:\n  workflow_dispatch:\n    inputs:\n      issue-num:\n        required: true\n        type: string\n        description: \"Number of the issue to update (issue should already exist!)\"\n      label-name:\n        required: true\n        type: string\n        description: \"Name of the label to create a task list for (eg. RENEE, ccbr1310, etc.)\"\n\njobs:\n  add-list:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: CCBR/actions/add-issue-label-list\n        with:\n          github-token: ${{ github.token }}\n          issue-num: ${{ inputs.issue-num }}\n          label-name: ${{ inputs.label-name }}\n\n\n\n\nissue-num: Number of the issue to update (issue should already exist!). Required.\nlabel-name: Name of the label to create a task list for (eg. RENEE or ccbr1310, etc.). Required.\ngithub-token: GitHub Actions token (e.g. { github.token }). Required."
  },
  {
    "objectID": "actions/add-issue-label-list/index.html#inputs",
    "href": "actions/add-issue-label-list/index.html#inputs",
    "title": "add-issue-label-list",
    "section": "",
    "text": "issue-num: Number of the issue to update (issue should already exist!). Required.\nlabel-name: Name of the label to create a task list for (eg. RENEE or ccbr1310, etc.). Required.\ngithub-token: GitHub Actions token (e.g. { github.token }). Required."
  }
]